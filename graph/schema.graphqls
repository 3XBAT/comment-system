
type Post {
  id :ID!
  title: String!
  username: String!
  content(limit: Int): String!
  comments: [ID!]
  allowComments: Boolean!
  createdAt: String!
  updatedAt: String!
}

input NewPost {
  id :ID
  title: String!
  username: String!
  content: String!
  allowComments: Boolean!
}


input UpdatePost {
  id: ID!
  title: String
  content: String
  comment: ID
  allowComments: Boolean
}

type Comment {
  id: ID!
  postId: ID!
  parentId: ID!
  content(limit: Int): String!
  username: String!
  createdAt: String!
  updatedAt: String!
  replies: [ID!]
}

input NewComment {
  postId: ID!
  parentId:ID!
  content: String!
  username: String!
}

input UpdateComment {
  id: ID!
  content: String
}

type Query {
  posts:[Post!]!
  post(id:ID!): Post!
  comments(postId: ID!, parentId: ID!, limit: Int, offset: Int): [Comment!]!
  comment(id:ID!):Comment!
}

type Mutation {
  createPost(input: NewPost): ID!
  updatePost(input: UpdatePost): ID!
  deletePost(id:ID!):Boolean!

  createComment(input:NewComment): ID!
  updateComment(input:UpdateComment): ID!
  deleteComment(id:ID!): Boolean!
}

# type Subscription {
#   commentAdded(postId: ID!): Comment!
# }
